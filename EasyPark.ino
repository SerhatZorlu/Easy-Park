/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/e17f4f72-1a68-4f17-9041-e7a0b0fe5f94 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int parkSlot1Time;
  int parkSlot2Time;
  bool parkSlot1;
  bool parkSlot2;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#include "NewPing.h"
// Hook up HC-SR04 with Trig to Arduino Pin 12, Echo to Arduino pin 13
#define TRIGGER_PIN1 16
#define ECHO_PIN1 17

#define TRIGGER_PIN2 22
#define ECHO_PIN2 23
// Maximum distance we want to ping for (in centimeters).
#define MAX_DISTANCE 25  
// NewPing setup of pins and maximum distance.
NewPing sonar1(TRIGGER_PIN1, ECHO_PIN1, MAX_DISTANCE);
NewPing sonar2(TRIGGER_PIN2, ECHO_PIN2, MAX_DISTANCE);


float distance1,distance2;

unsigned long startTime1,startTime2;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  
  pinMode(15, OUTPUT);
  pinMode(4, OUTPUT);
  
  
  startTime1=millis();
  startTime2=millis();
  
  
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  distance1 = sonar1.ping_cm();
  distance2 = sonar2.ping_cm();
  
  
  // Send results to Serial Monitor
  Serial.print("Mesafe1 = ");
  
  if (distance1 >= 25 || distance1 <= 0) 
  {
    Serial.println("Out of range");
    digitalWrite(15, HIGH);
    parkSlot1=false;
    startTime1=millis();
    parkSlot1Time=0;
    Serial.print("Time=");
    Serial.println(" 0");
  }
  else 
  {

    digitalWrite(15, LOW);
    Serial.print(distance1);
    Serial.println(" cm");
    parkSlot1=true;
    Serial.print("Time=");
    Serial.println(millis()-startTime1);
    parkSlot1Time=(millis()-startTime1)/1000;
    
  }

  Serial.print("Mesafe2 = ");

  if (distance2 >= 25 || distance2 <= 0) 
  {
    Serial.println("Out of range");
    digitalWrite(4, HIGH);
    parkSlot2=false;
    startTime2=millis();
    parkSlot2Time=0;
    Serial.print("Time=");
    Serial.println(" 0");
  }
  else 
  {

    digitalWrite(4, LOW);
    Serial.print(distance2);
    Serial.println(" cm");
    parkSlot2=true;
    Serial.print("Time=");
    Serial.println(millis()-startTime2);
    parkSlot2Time=(millis()-startTime2)/1000;
  
  }

  
  delay(1000);
  
}


/*
  Since ParkSlot1 is READ_WRITE variable, onParkSlot1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onParkSlot1Change()  {
  // Add your code here to act upon ParkSlot1 change
}

/*
  Since ParkSlot1Time is READ_WRITE variable, onParkSlot1TimeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onParkSlot1TimeChange()  {
  // Add your code here to act upon ParkSlot1Time change
}



/*
  Since ParkSlot2 is READ_WRITE variable, onParkSlot2Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onParkSlot2Change()  {
  // Add your code here to act upon ParkSlot2 change
}

/*
  Since ParkSlot2Time is READ_WRITE variable, onParkSlot2TimeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onParkSlot2TimeChange()  {
  // Add your code here to act upon ParkSlot2Time change
}

/*
  Since ParkSlot3 is READ_WRITE variable, onParkSlot3Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onParkSlot3Change()  {
  // Add your code here to act upon ParkSlot3 change
}

/*
  Since ParkSlot3Time is READ_WRITE variable, onParkSlot3TimeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onParkSlot3TimeChange()  {
  // Add your code here to act upon ParkSlot3Time change
}




